#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef LMMATTERCORE_SWIFT_H
#define LMMATTERCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LMMatterCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class LMMTRHomeCertificateReq;
@class LMMTRHomeCertificateResp;
@class LMMTRCreatCertificateReq;
@class LMMTRCreatCertificateResp;
@class LMMTRPAACertificateReq;
@class LMMTRPAACertificateResp;
@class LMMTRVendorInfosResp;
@class LMMTRDeviceInfoReq;
@class LMMTRDeviceInfoResp;
@class LMMTRGetConfigReq;
@class LMMTRGetConfigResp;
@class LMMTRAqaraSpecModel;
@class LMMTRBindDeviceResp;
@class LMMTRUnbindDeviceReq;
@class LMMTRUnbindDeviceResp;
@class LMMTRDeviceSignupReq;
@class LMMTRDeviceSignupResp;
@class LMMTRDeviceDetailReq;
@class LMMTRDeviceDetailResp;
@class LMMTRGenNodeIDReq;
@class LMMTRGenNodeIDResp;
@class LMMTRThreadNetworkReq;
@class LMMTRThreadNetworkResp;
@class LMMTRThreadNetworkListReq;
@class LMMTRThreadNetworkListResp;
@class LMMTRPreferredThreadNetworkReq;
@class LMMTRDeleteThreadNetworkReq;
@class LMMTRDeleteThreadNetworkResp;
@class LMMTRResQueryReq;
@class LMMTRResQueryResp;
@class LMMTRMatterWriteReq;
@class LMMTRMatterRemoveReq;
@class LMMTRResWriteReq;
@class LMMTRResSubscribeReq;
@class LMMTRGetMatterLeaderReq;
@class LMMTRGetMatterLeaderResp;
@class LMMTRTraitInfoReq;
@class LMMTRTraitInfoResp;
@class NSString;
@class LMMTRModelInfoReq;
@class LMMTRModelInfoResp;
@class LMMTRDeviceLimitReq;
@class LMMTRDeviceLimitResp;

SWIFT_CLASS("_TtC12LMMatterCore15LMMTRApiManager") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRApiManager : NSObject
/// 获取证书
/// \param req LMMTRCertificateReq
///
/// \param completion LMMTRHomeCertificateResp
///
+ (void)fetchCertificateWith:(LMMTRHomeCertificateReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRHomeCertificateResp * _Nullable, NSError * _Nullable))completion;
/// 创建家庭下的Matter证书
/// \param req LMMTRCreatCertificateReq
///
/// \param completion LMMTRCreatCertificateResp
///
+ (void)creatCertificateWith:(LMMTRCreatCertificateReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRCreatCertificateResp * _Nullable, NSError * _Nullable))completion;
/// 通过从设备获取到的PAI证书里的subjctKeyId和issuerId从DCL服务器获取PAA证书
/// \param req LMMTRPAACertReq
///
/// \param completion LMMTRPAACertificateResp
///
+ (void)fetchPAACertificateWith:(LMMTRPAACertificateReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRPAACertificateResp * _Nullable, NSError * _Nullable))completion;
/// 获取DCL上的厂商信息
/// \param completion LMMTRVendorInfosResp
///
+ (void)fetchVendorInfosWithCompletion:(void (^ _Nullable)(LMMTRVendorInfosResp * _Nullable, NSError * _Nullable))completion;
/// 通过PID+VID去DCL查询设备相关信息
/// \param req LMMTRDeviceInfoReq
///
/// \param completion LMMTRDeviceInfoResp
///
+ (void)fetchDeviceInfoWith:(LMMTRDeviceInfoReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRDeviceInfoResp * _Nullable, NSError * _Nullable))completion;
/// 获取Matter配置文件
/// \param req LMMTRGetConfigReq
///
/// \param completion LMMTRGetConfigResp
///
+ (void)fetchMatterConfigWith:(LMMTRGetConfigReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRGetConfigResp * _Nullable, NSError * _Nullable))completion;
/// 绑定用户
/// \param req LMMTRAqaraSpecModel
///
/// \param completion LMMTRBindDeviceResp
///
+ (void)bindDeviceWith:(LMMTRAqaraSpecModel * _Nonnull)req completion:(void (^ _Nullable)(LMMTRBindDeviceResp * _Nullable, NSError * _Nullable))completion;
/// 解绑设备
/// \param req LMMTRUnbindDeviceReq
///
/// \param completion LMMTRUnbindDeviceResp
///
+ (void)unbindDeviceWith:(LMMTRUnbindDeviceReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRUnbindDeviceResp * _Nullable, NSError * _Nullable))completion;
/// Matter设备注册
/// \param req LMMTRDeviceSignupReq
///
/// \param completion LMMTRDeviceSignupResp
///
+ (void)deviceSignupWith:(LMMTRDeviceSignupReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRDeviceSignupResp * _Nullable, NSError * _Nullable))completion;
/// 查询设备详情
/// \param req LMMTRDeviceDetailReq
///
/// \param completion LMMTRDeviceDetailResp
///
+ (void)deviceDeailWith:(LMMTRDeviceDetailReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRDeviceDetailResp * _Nullable, NSError * _Nullable))completion;
/// 获取NodeID
/// \param req LMMTRGenNodeIDReq
///
/// \param completion LMMTRGenNodeIDResp
///
+ (void)genNodeIDWith:(LMMTRGenNodeIDReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRGenNodeIDResp * _Nullable, NSError * _Nullable))completion;
/// 获取Thread网络信息
/// \param req LMMTRThreadNetworkReq
///
/// \param completion LMMTRThreadNetworkResp
///
+ (void)fetchThreadNetworkInfoWith:(LMMTRThreadNetworkReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRThreadNetworkResp * _Nullable, NSError * _Nullable))completion;
/// 获取Thread网络列表
/// \param req LMMTRThreadNetworkListReq
///
/// \param completion LMMTRThreadNetworkListResp
///
+ (void)threadNetworkListWith:(LMMTRThreadNetworkListReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRThreadNetworkListResp * _Nullable, NSError * _Nullable))completion;
/// 获取首选Thread网络信息
/// \param req LMMTRPreferredThreadNetworkReq
///
/// \param completion LMMTRThreadNetworkListResp
///
+ (void)preferredThreadNetworkWith:(LMMTRPreferredThreadNetworkReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRThreadNetworkListResp * _Nullable, NSError * _Nullable))completion;
/// 删除Thread网络信息
/// \param req LMMTRPreferredThreadNetworkReq
///
/// \param completion LMMTRThreadNetworkListResp
///
+ (void)deleteThreadNetworkWith:(LMMTRDeleteThreadNetworkReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRDeleteThreadNetworkResp * _Nullable, NSError * _Nullable))completion;
/// 资源值查询
/// \param req LMMTRResQueryReq
///
/// \param completion LMMTRResQueryResp
///
+ (void)resQueryWith:(LMMTRResQueryReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRResQueryResp * _Nullable, NSError * _Nullable))completion;
/// matter资源值写入
/// \param req LMMTRMatterWriteReq
///
/// \param completion Error
///
+ (void)matterWriteWith:(LMMTRMatterWriteReq * _Nonnull)req completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// 移除Matter生态
/// \param req LMMTRMatterRemoveReq
///
/// \param completion Error
///
+ (void)matterRemoveWith:(LMMTRMatterRemoveReq * _Nonnull)req completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// 资源值写入
/// \param req LMMTRResWriteReq
///
/// \param completion Error
///
+ (void)resWriteWith:(LMMTRResWriteReq * _Nonnull)req completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// 资源值订阅
/// \param req LMMTRResSubscribeReq
///
/// \param completion Error
///
+ (void)resSubscribeWith:(LMMTRResSubscribeReq * _Nonnull)req completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// 获取MatterLeaderId
/// \param req LMMTRGetMatterLeaderReq
///
/// \param completion LMMTRGetMatterLeaderResp, Error
///
+ (void)getMatterLeaderWith:(LMMTRGetMatterLeaderReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRGetMatterLeaderResp * _Nullable, NSError * _Nullable))completion;
/// 通过TraitID查询相关信息
/// \param req LMMTRTraitInfoReq
///
/// \param completion LMMTRTraitInfoResp
///
+ (void)queryTraitInfoWith:(LMMTRTraitInfoReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRTraitInfoResp * _Nullable, NSError * _Nullable))completion;
/// 查询家庭位置下的thread设备信息
/// \param positionId 位置ID
///
/// \param completion LMMTRTraitInfoResp
///
+ (void)queryThreadDeviceInfoWithPositionId:(NSString * _Nonnull)positionId completion:(void (^ _Nullable)(LMMTRTraitInfoResp * _Nullable, NSError * _Nullable))completion;
/// 创建Thread网络
/// \param completion 回调
///
+ (void)creatThreadNetworkWithDid:(NSString * _Nonnull)did completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// 查询家庭位置下的Controller设备信息
/// \param positionId 位置ID
///
/// \param completion LMMTRTraitInfoResp
///
+ (void)queryControllerDeviceInfoWithPositionId:(NSString * _Nonnull)positionId completion:(void (^ _Nullable)(LMMTRTraitInfoResp * _Nullable, NSError * _Nullable))completion;
/// 通过PID+VID查询是否是Matter控制器设备
/// \param req LMMTRModelInfoReq
///
/// \param completion LMMTRModelInfoResp
///
+ (void)queryMatterDeviceInfoWith:(LMMTRModelInfoReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRModelInfoResp * _Nullable, NSError * _Nullable))completion;
/// 查询设备是否支持绑定AIOT
/// \param req LMMTRDeviceLimitReq
///
/// \param completion LMMTRDeviceLimitResp
///
+ (void)deviceLimitQueryWith:(LMMTRDeviceLimitReq * _Nonnull)req completion:(void (^ _Nullable)(LMMTRDeviceLimitResp * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 基类
SWIFT_CLASS("_TtC12LMMatterCore18LMMTRHttpBaseModel")
@interface LMMTRHttpBaseModel : NSObject
- (NSString * _Nullable)modelDescription SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 返回基类
SWIFT_CLASS("_TtC12LMMatterCore17LMMTRHTTPBaseResp")
@interface LMMTRHTTPBaseResp : LMMTRHttpBaseModel
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LMMTRCertsInfo;

/// PAA证书信息
SWIFT_CLASS("_TtC12LMMatterCore25LMMTRApprovedCertificates")
@interface LMMTRApprovedCertificates : LMMTRHTTPBaseResp
/// Base64 Subject 信息
@property (nonatomic, copy) NSString * _Nullable subject;
/// subjectKeyId
@property (nonatomic, copy) NSString * _Nullable subjectKeyId;
/// 证书信息
@property (nonatomic, copy) NSArray<LMMTRCertsInfo *> * _Nullable certs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 请求基类
SWIFT_CLASS("_TtC12LMMatterCore16LMMTRHTTPBaseReq")
@interface LMMTRHTTPBaseReq : LMMTRHttpBaseModel
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LMMTRMatterModel;

SWIFT_CLASS("_TtC12LMMatterCore19LMMTRAqaraSpecModel") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRAqaraSpecModel : LMMTRHTTPBaseReq
/// nodeID
@property (nonatomic, copy) NSString * _Nullable nid;
/// 位置ID
@property (nonatomic, copy) NSString * _Nullable positionId;
/// 设备
@property (nonatomic, copy) NSArray<LMMTRMatterModel *> * _Nonnull devices;
/// 获取设备名称（默认取第一个设备的名称，如果是桥设备带多个子设备的，第一个设备就是桥设备）
- (NSString * _Nullable)getDevcieName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;

/// Value模型
SWIFT_CLASS("_TtC12LMMatterCore14LMMTRArgsModel") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRArgsModel : NSObject
/// Parameter ID
@property (nonatomic, strong) NSNumber * _Nullable id;
/// Parameter 路径
@property (nonatomic, copy) NSString * _Nullable path;
/// Matter路径
@property (nonatomic, copy) NSString * _Nullable mth;
/// Parameter Value
@property (nonatomic) id _Nullable value;
/// 初始化
- (nonnull instancetype)initWithId:(NSNumber * _Nullable)id path:(NSString * _Nullable)path mth:(NSString * _Nullable)mth value:(id _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12LMMatterCore18LMMTRAttrDataModel") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRAttrDataModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore23LMMTRAttrTypeValueModel") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRAttrTypeValueModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12LMMatterCore19LMMTRAttributeModel") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRAttributeModel : NSObject
/// traitId
@property (nonatomic, strong) NSNumber * _Nullable id;
/// attrId
@property (nonatomic, strong) NSNumber * _Nullable mId;
/// AqaraLink路径
@property (nonatomic, copy) NSString * _Nullable path;
/// Matter路径
@property (nonatomic, copy) NSString * _Nullable mth;
/// 参数
@property (nonatomic, copy) NSArray<LMMTRArgsModel *> * _Nonnull args;
/// 初始化
- (nonnull instancetype)initWithId:(NSNumber * _Nullable)id mId:(NSNumber * _Nullable)mId path:(NSString * _Nullable)path mth:(NSString * _Nullable)mth args:(NSArray<LMMTRArgsModel *> * _Nonnull)args;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12LMMatterCore19LMMTRBindDeviceInfo") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRBindDeviceInfo : LMMTRHttpBaseModel
@property (nonatomic, copy) NSString * _Nullable did;
@property (nonatomic, copy) NSString * _Nullable model;
@property (nonatomic, strong) NSNumber * _Nullable state;
@property (nonatomic, strong) NSNumber * _Nullable modelType;
@property (nonatomic, strong) NSNumber * _Nullable isPreventMistakenDelete;
@property (nonatomic, strong) NSNumber * _Nullable bindTimeout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 绑定用户返回
SWIFT_CLASS("_TtC12LMMatterCore19LMMTRBindDeviceResp") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRBindDeviceResp : LMMTRHTTPBaseResp
@property (nonatomic, copy) NSArray<LMMTRBindDeviceInfo *> * _Nullable result;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore16LMMTRCertManager") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRCertManager : NSObject
/// 获取家庭下的Matter证书
+ (void)fetchHomeCertificateWithPositionId:(NSString * _Nonnull)positionId userCache:(BOOL)userCache completion:(void (^ _Nullable)(LMMTRHomeCertificateResp * _Nullable, NSError * _Nullable))completion;
/// 获取云端家庭下的Matter证书
+ (void)getCluodHomeCertificateWithPositionId:(NSString * _Nonnull)positionId userCache:(BOOL)userCache completion:(void (^ _Nullable)(LMMTRHomeCertificateResp * _Nullable, NSError * _Nullable))completion;
/// 创建家庭下的Matter证书
+ (void)creatHomeCertificateWithPositionId:(NSString * _Nonnull)positionId userCache:(BOOL)userCache completion:(void (^ _Nullable)(LMMTRHomeCertificateResp * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRCertManager (SWIFT_EXTENSION(LMMatterCore))
/// 缓存家庭下的Matter证书
+ (void)cacheHomeCertificateWithPositionId:(NSString * _Nonnull)positionId certificate:(LMMTRHomeCertificateResp * _Nonnull)certificate;
/// 获取缓存的家庭下的Matter证书
+ (LMMTRHomeCertificateResp * _Nullable)getCacheHomeCertificateWithPositionId:(NSString * _Nonnull)positionId SWIFT_WARN_UNUSED_RESULT;
/// 删除缓存的证书数据
+ (void)removeCacheCertificateWithPositionId:(NSString * _Nonnull)positionId;
@end


/// 证书模型
SWIFT_CLASS("_TtC12LMMatterCore21LMMTRCertificateModel")
@interface LMMTRCertificateModel : LMMTRHTTPBaseResp
/// 用户id
@property (nonatomic, copy) NSString * _Nullable userId;
/// 位置Id
@property (nonatomic, copy) NSString * _Nullable positionId;
/// fabricId
@property (nonatomic, copy) NSString * _Nullable fabricId;
/// 根证书ID
@property (nonatomic, copy) NSString * _Nullable rcacId;
/// 中间证书ID
@property (nonatomic, copy) NSString * _Nullable icacId;
/// nodeId
@property (nonatomic, copy) NSString * _Nullable nodeId;
/// 证书密钥对
@property (nonatomic, copy) NSString * _Nullable privateKey;
/// 序列号
@property (nonatomic, copy) NSString * _Nullable serialNum;
/// 是否有效
@property (nonatomic) BOOL activated;
/// subjectKeyId
@property (nonatomic, copy) NSString * _Nullable subjectKeyId;
/// authorityKeyId
@property (nonatomic, copy) NSString * _Nullable authorityKeyId;
/// 证书内容
@property (nonatomic, copy) NSString * _Nullable cert;
/// subject
@property (nonatomic, copy) NSString * _Nullable subject;
/// issuer
@property (nonatomic, copy) NSString * _Nullable issuer;
/// ipk
@property (nonatomic, copy) NSString * _Nullable ipk;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// PAA证书信息
SWIFT_CLASS("_TtC12LMMatterCore14LMMTRCertsInfo")
@interface LMMTRCertsInfo : LMMTRHTTPBaseResp
/// PEM证书内容（hexStr）
@property (nonatomic, copy) NSString * _Nullable pemCert;
/// 序列号
@property (nonatomic, copy) NSString * _Nullable serialNumber;
@property (nonatomic, copy) NSString * _Nullable issuer;
@property (nonatomic, copy) NSString * _Nullable authorityKeyId;
@property (nonatomic, copy) NSString * _Nullable rootSubject;
@property (nonatomic, copy) NSString * _Nullable rootSubjectKeyId;
@property (nonatomic, copy) NSString * _Nullable isRoot;
@property (nonatomic, copy) NSString * _Nullable owner;
@property (nonatomic, copy) NSString * _Nullable subject;
@property (nonatomic, copy) NSString * _Nullable subjectKeyId;
@property (nonatomic, copy) NSString * _Nullable subjectAsText;
@property (nonatomic, copy) NSArray * _Nullable rejects;
@property (nonatomic, copy) NSArray * _Nullable approvals;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LMMTRCommandModel;

SWIFT_CLASS("_TtC12LMMatterCore17LMMTRClusterModel") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRClusterModel : NSObject
/// FunctionId
@property (nonatomic, strong) NSNumber * _Nullable id;
/// MatterId
@property (nonatomic, strong) NSNumber * _Nullable mId;
/// AqaraLink路径
@property (nonatomic, copy) NSString * _Nullable path;
/// Matter路径
@property (nonatomic, copy) NSString * _Nullable mth;
/// attribute集合(AqaraLink traits)
@property (nonatomic, copy) NSArray<LMMTRAttributeModel *> * _Nonnull traits;
/// command集合
@property (nonatomic, copy) NSArray<LMMTRCommandModel *> * _Nonnull cmds;
/// 初始化
- (nonnull instancetype)initWithId:(NSNumber * _Nullable)id mId:(NSNumber * _Nullable)mId path:(NSString * _Nullable)path mth:(NSString * _Nullable)mth traits:(NSArray<LMMTRAttributeModel *> * _Nonnull)traits cmds:(NSArray<LMMTRCommandModel *> * _Nonnull)cmds;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Matter Cluster转Aqara Function 映射表
SWIFT_CLASS("_TtC12LMMatterCore29LMMTRClusterToFunctionMapping")
@interface LMMTRClusterToFunctionMapping : NSObject
/// Matter clusterID
@property (nonatomic, strong) NSNumber * _Nullable cId;
/// Function clusterID
@property (nonatomic, strong) NSNumber * _Nullable fId;
/// Atteributes转Traits
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull aTt;
/// Commands转Commands
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull cTc;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore17LMMTRCommandModel") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRCommandModel : NSObject
/// traitId
@property (nonatomic, strong) NSNumber * _Nullable id;
/// attrId
@property (nonatomic, strong) NSNumber * _Nullable mId;
/// AqaraLink路径
@property (nonatomic, copy) NSString * _Nullable path;
/// Matter路径
@property (nonatomic, copy) NSString * _Nullable mth;
/// 初始化
- (nonnull instancetype)initWithId:(NSNumber * _Nullable)id mId:(NSNumber * _Nullable)mId path:(NSString * _Nullable)path mth:(NSString * _Nullable)mth;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class LMMTRDevice;

SWIFT_CLASS("_TtC12LMMatterCore22LMMTRConversionManager") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRConversionManager : NSObject
/// Matter设备
@property (nonatomic, strong) LMMTRDevice * _Nonnull device;
/// 位置ID
@property (nonatomic, copy) NSString * _Nonnull positionId;
/// 初始化
- (nonnull instancetype)initWithDevice:(LMMTRDevice * _Nonnull)device positionId:(NSString * _Nonnull)positionId OBJC_DESIGNATED_INITIALIZER;
/// 构建Matter物模型
- (void)buildMatterJsonWithCompletion:(void (^ _Nullable)(LMMTRAqaraSpecModel * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 创建家庭证书
SWIFT_CLASS("_TtC12LMMatterCore24LMMTRCreatCertificateReq")
@interface LMMTRCreatCertificateReq : LMMTRHTTPBaseReq
/// 家庭位置
@property (nonatomic, copy) NSString * _Nonnull positionId;
/// 初始化
- (nonnull instancetype)initWithPositionId:(NSString * _Nonnull)positionId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Matter用户家庭证书查询返回
SWIFT_CLASS("_TtC12LMMatterCore24LMMTRHomeCertificateResp")
@interface LMMTRHomeCertificateResp : LMMTRHTTPBaseResp
@property (nonatomic, copy) NSArray<LMMTRCertificateModel *> * _Nonnull result;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 创建家庭证书返回
SWIFT_CLASS("_TtC12LMMatterCore25LMMTRCreatCertificateResp")
@interface LMMTRCreatCertificateResp : LMMTRHomeCertificateResp
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 删除指定的Thread网络请求
SWIFT_CLASS("_TtC12LMMatterCore27LMMTRDeleteThreadNetworkReq")
@interface LMMTRDeleteThreadNetworkReq : LMMTRHTTPBaseReq
/// 家庭ID
@property (nonatomic, copy) NSString * _Nonnull homeId;
/// 唯一ID
@property (nonatomic, copy) NSString * _Nonnull operationalDataset;
/// 初始化
- (nonnull instancetype)initWithHomeId:(NSString * _Nonnull)homeId operationalDataset:(NSString * _Nonnull)operationalDataset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 删除指定的Thread网络返回
SWIFT_CLASS("_TtC12LMMatterCore28LMMTRDeleteThreadNetworkResp")
@interface LMMTRDeleteThreadNetworkResp : LMMTRHTTPBaseResp
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore20LMMTRDeviceDetailReq")
@interface LMMTRDeviceDetailReq : LMMTRHTTPBaseReq
/// 设备ID
@property (nonatomic, copy) NSString * _Nullable did;
/// 初始化
- (nonnull instancetype)initWithDid:(NSString * _Nullable)did OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12LMMatterCore21LMMTRDeviceDetailResp") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDeviceDetailResp : LMMTRHTTPBaseResp
/// nodeID
@property (nonatomic, copy) NSString * _Nullable nid;
/// 位置ID
@property (nonatomic, copy) NSString * _Nullable positionId;
/// 设备
@property (nonatomic, copy) NSArray<LMMTRMatterModel *> * _Nonnull devices;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore15LMMTRDeviceInfo")
@interface LMMTRDeviceInfo : LMMTRHttpBaseModel
/// 厂商ID
@property (nonatomic, strong) NSNumber * _Nullable vid;
/// 产品ID
@property (nonatomic, strong) NSNumber * _Nullable pid;
/// 设备类型
@property (nonatomic, strong) NSNumber * _Nullable deviceTypeId;
/// 产品名称
@property (nonatomic, copy) NSString * _Nullable productName;
/// 产品标签
@property (nonatomic, copy) NSString * _Nullable productLabel;
/// 编号
@property (nonatomic, copy) NSString * _Nullable partNumber;
/// 调试自定义流程
@property (nonatomic, strong) NSNumber * _Nullable commissioningCustomFlow;
/// 调试自定义流程Url
@property (nonatomic, copy) NSString * _Nullable commissioningCustomFlowUrl;
/// 调测模式初始步骤提示
@property (nonatomic, strong) NSNumber * _Nullable commissioningModeInitialStepsHint;
/// 调试模式初始步骤说明
@property (nonatomic, copy) NSString * _Nullable commissioningModeInitialStepsInstruction;
/// 调测模式二级步骤提示
@property (nonatomic, strong) NSNumber * _Nullable commissioningModeSecondaryStepsHint;
/// 调试模式二级步骤说明
@property (nonatomic, copy) NSString * _Nullable commissioningModeSecondaryStepsInstruction;
/// 用户手册网址
@property (nonatomic, copy) NSString * _Nullable userManualUrl;
/// 用户支持网址
@property (nonatomic, copy) NSString * _Nullable supportUrl;
/// 产品网址
@property (nonatomic, copy) NSString * _Nullable productUrl;
/// lsf网站
@property (nonatomic, copy) NSString * _Nullable lsfUrl;
/// lsf修订
@property (nonatomic, strong) NSNumber * _Nullable lsfRevision;
/// 创建者
@property (nonatomic, copy) NSString * _Nullable creator;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 从DCL请求设备信息
SWIFT_CLASS("_TtC12LMMatterCore18LMMTRDeviceInfoReq")
@interface LMMTRDeviceInfoReq : LMMTRHTTPBaseReq
/// 厂商ID
@property (nonatomic, strong) NSNumber * _Nonnull vid;
/// 产品ID
@property (nonatomic, strong) NSNumber * _Nonnull pid;
/// 初始化
- (nonnull instancetype)initWithVid:(NSNumber * _Nonnull)vid pid:(NSNumber * _Nonnull)pid OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 从DCL请求设备信息返回内容
SWIFT_CLASS("_TtC12LMMatterCore19LMMTRDeviceInfoResp")
@interface LMMTRDeviceInfoResp : LMMTRHTTPBaseResp
/// 错误码
@property (nonatomic, copy) NSString * _Nullable code;
/// 错误信息
@property (nonatomic, copy) NSString * _Nullable message;
/// 设备信息
@property (nonatomic, strong) LMMTRDeviceInfo * _Nullable model;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 查询是否支持此设备类型
SWIFT_CLASS("_TtC12LMMatterCore19LMMTRDeviceLimitReq")
@interface LMMTRDeviceLimitReq : LMMTRHTTPBaseReq
@property (nonatomic) NSInteger vid;
@property (nonatomic) NSInteger pid;
@property (nonatomic) NSInteger deviceType;
/// 初始化
- (nonnull instancetype)initWithVid:(NSInteger)vid pid:(NSInteger)pid deviceType:(NSInteger)deviceType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 查询是否支持此设备类型返回
SWIFT_CLASS("_TtC12LMMatterCore20LMMTRDeviceLimitResp")
@interface LMMTRDeviceLimitResp : LMMTRHTTPBaseResp
@property (nonatomic) BOOL access;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore24LMMTRDeviceResponseModel") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDeviceResponseModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// 开始Matter设备的入网请求
SWIFT_CLASS("_TtC12LMMatterCore20LMMTRDeviceSignupReq")
@interface LMMTRDeviceSignupReq : LMMTRHTTPBaseReq
/// 家庭ID
@property (nonatomic, copy) NSString * _Nonnull positionId;
/// 网关ID，非必选，不填默认下发家庭Matter中枢，没有默认中枢则选一个在线的M3
@property (nonatomic, copy) NSString * _Nonnull nid;
/// node Id
@property (nonatomic, copy) NSString * _Nullable gatewayId;
/// 初始化
- (nonnull instancetype)initWithPositionId:(NSString * _Nonnull)positionId nid:(NSString * _Nonnull)nid gatewayId:(NSString * _Nullable)gatewayId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 开始Matter设备的入网返回
SWIFT_CLASS("_TtC12LMMatterCore21LMMTRDeviceSignupResp")
@interface LMMTRDeviceSignupResp : LMMTRHTTPBaseResp
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore18LMMTREndpointModel") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTREndpointModel : NSObject
/// endpoint编号
@property (nonatomic, strong) NSNumber * _Nullable id;
/// 设备类型
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable type;
/// Cluster集合(AqaraLink funcs集合)
@property (nonatomic, copy) NSArray<LMMTRClusterModel *> * _Nonnull funcs;
/// 初始化
- (nonnull instancetype)initWithId:(NSNumber * _Nullable)id type:(NSArray<NSNumber *> * _Nullable)type funcs:(NSArray<LMMTRClusterModel *> * _Nonnull)funcs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTREndpointModel (SWIFT_EXTENSION(LMMatterCore))
/// 合并数据，如果已存在相同FunctionId的Model就合并数据，否则就新增
- (void)merge:(LMMTRClusterModel * _Nonnull)model;
@end



/// Event模型
SWIFT_CLASS("_TtC12LMMatterCore15LMMTREventModel") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTREventModel : NSObject
/// 初始化
- (nonnull instancetype)initWithId:(NSNumber * _Nullable)id mId:(NSNumber * _Nullable)mId path:(NSString * _Nullable)path mth:(NSString * _Nullable)mth;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// 获取NodeID请求
SWIFT_CLASS("_TtC12LMMatterCore17LMMTRGenNodeIDReq")
@interface LMMTRGenNodeIDReq : LMMTRHTTPBaseReq
/// 家庭位置ID
@property (nonatomic, copy) NSString * _Nonnull positionId;
/// 数量
@property (nonatomic, strong) NSNumber * _Nullable size;
/// 初始化
- (nonnull instancetype)initWithPositionId:(NSString * _Nonnull)positionId size:(NSNumber * _Nullable)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 获取NodeID返回
SWIFT_CLASS("_TtC12LMMatterCore18LMMTRGenNodeIDResp")
@interface LMMTRGenNodeIDResp : LMMTRHTTPBaseResp
/// 可用的nodeIds
@property (nonatomic, copy) NSArray<NSString *> * _Nullable nodeIds;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 获取Matter配置文件请求
SWIFT_CLASS("_TtC12LMMatterCore17LMMTRGetConfigReq")
@interface LMMTRGetConfigReq : LMMTRHTTPBaseReq
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 获取Matter配置文件返回
SWIFT_CLASS("_TtC12LMMatterCore18LMMTRGetConfigResp")
@interface LMMTRGetConfigResp : LMMTRHTTPBaseResp
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 获取MatterLeader did请求
SWIFT_CLASS("_TtC12LMMatterCore23LMMTRGetMatterLeaderReq")
@interface LMMTRGetMatterLeaderReq : LMMTRHTTPBaseReq
/// 家庭ID
@property (nonatomic, copy) NSString * _Nonnull positionId;
/// 初始化
- (nonnull instancetype)initWithPositionId:(NSString * _Nonnull)positionId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 获取MatterLeader did返回
SWIFT_CLASS("_TtC12LMMatterCore24LMMTRGetMatterLeaderResp")
@interface LMMTRGetMatterLeaderResp : LMMTRHTTPBaseResp
/// MatterLeaderId
@property (nonatomic, copy) NSString * _Nullable matterLeaderId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class LMMTRWiFiNetworkParams;
@class LMMTRThreadNetworkParams;
@class LMMTRModelInfo;
@class MTRSetupPayload;

SWIFT_CLASS("_TtC12LMMatterCore18LMMTRHelperManager") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRHelperManager : NSObject
/// 默认的Wi-Fi网络参数
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) LMMTRWiFiNetworkParams * _Nonnull defultWifiParams;)
+ (LMMTRWiFiNetworkParams * _Nonnull)defultWifiParams SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefultWifiParams:(LMMTRWiFiNetworkParams * _Nonnull)value;
/// 默认的Thread网络参数
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) LMMTRThreadNetworkParams * _Nonnull defultThreadParams;)
+ (LMMTRThreadNetworkParams * _Nonnull)defultThreadParams SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefultThreadParams:(LMMTRThreadNetworkParams * _Nonnull)value;
+ (void)startMatterControllerWithPositionId:(NSString * _Nonnull)positionId completion:(void (^ _Nullable)(NSError * _Nullable))completion;
+ (void)handlerMatterQRCodeWith:(NSString * _Nonnull)qrCode positionId:(NSString * _Nonnull)positionId controllerDeviceCallBack:(void (^ _Nullable)(LMMTRModelInfo * _Nonnull))controllerDeviceCallBack normalDeviceCallBack:(void (^ _Nullable)(MTRSetupPayload * _Nonnull))normalDeviceCallBack controllerOfflineCallBack:(void (^ _Nullable)(void))controllerOfflineCallBack controllerEmptyCallBack:(void (^ _Nullable)(void))controllerEmptyCallBack errorCallBack:(void (^ _Nullable)(NSError * _Nonnull))errorCallBack;
+ (void)supportDeviceTypeWithPid:(NSNumber * _Nonnull)pid vid:(NSNumber * _Nonnull)vid completion:(void (^ _Nullable)(NSError * _Nullable))completion;
+ (void)supportDeviceTypeWithPid:(NSNumber * _Nonnull)pid vid:(NSNumber * _Nonnull)vid deviceType:(NSNumber * _Nonnull)deviceType completion:(void (^ _Nullable)(NSError * _Nullable))completion;
+ (void)stopMatterController;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MTRDeviceAttestationInfo;

SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRHelperManager (SWIFT_EXTENSION(LMMatterCore))
+ (void)validateDeviceCredential:(MTRDeviceAttestationInfo * _Nonnull)attestationInfo completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


/// Matter用户家庭证书查询
SWIFT_CLASS("_TtC12LMMatterCore23LMMTRHomeCertificateReq")
@interface LMMTRHomeCertificateReq : LMMTRHTTPBaseReq
/// 家庭位置
@property (nonatomic, copy) NSString * _Nonnull positionId;
/// 初始化
- (nonnull instancetype)initWithPositionId:(NSString * _Nonnull)positionId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class LMMTRMappingModel;

/// 映射表
SWIFT_CLASS("_TtC12LMMatterCore19LMMTRMappingManager") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRMappingManager : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LMMTRMappingManager * _Nonnull instance;)
+ (LMMTRMappingManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// 映射表模型
@property (nonatomic, strong) LMMTRMappingModel * _Nullable mapping;
/// 请使用单例
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 获取Cluster转换Func的映射表
- (LMMTRClusterToFunctionMapping * _Nullable)getClusterToFuncMapping:(NSNumber * _Nonnull)clusterID SWIFT_WARN_UNUSED_RESULT;
/// 获取支持的Clusters
- (NSArray<NSNumber *> * _Nonnull)getSupportClustersWithClusters:(NSArray<NSNumber *> * _Nonnull)clusters SWIFT_WARN_UNUSED_RESULT;
/// 是否支持此设备类型
- (BOOL)supportDeviceTypeWith:(NSNumber * _Nonnull)deviceType SWIFT_WARN_UNUSED_RESULT;
/// 更新ID映射表文件
- (void)updateIDMapping;
/// 更新配置映射表文件
- (void)updateConfigMapping;
@end


SWIFT_CLASS("_TtC12LMMatterCore17LMMTRMappingModel") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRMappingModel : NSObject
/// 版本号
@property (nonatomic, copy) NSString * _Nonnull version;
/// Matter clusterID
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cIds;
/// Matter DeviceType转AqaraLink DeviceType
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull mtTat;
/// Cluster转Function
@property (nonatomic, copy) NSArray<LMMTRClusterToFunctionMapping *> * _Nonnull cTf;
/// YYModel
+ (NSDictionary<NSString *, id> * _Nullable)modelContainerPropertyGenericClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore16LMMTRMatterModel") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRMatterModel : LMMTRHTTPBaseReq
/// Endpoint模型
@property (nonatomic, copy) NSArray<LMMTREndpointModel *> * _Nonnull eps;
/// 构建数据模型，一定要在最后生成数据的时候调用一次，因为有部分外层数据是通过查找内部的参数来赋值的
- (BOOL)buildModelAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// 移除Matter生态
SWIFT_CLASS("_TtC12LMMatterCore20LMMTRMatterRemoveReq")
@interface LMMTRMatterRemoveReq : LMMTRHTTPBaseReq
/// 设备did
@property (nonatomic, copy) NSString * _Nonnull did;
/// 是否需要填充最新的动态数据
@property (nonatomic) BOOL fullValue;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 资源值写入请求
SWIFT_CLASS("_TtC12LMMatterCore19LMMTRMatterWriteReq")
@interface LMMTRMatterWriteReq : LMMTRHTTPBaseReq
/// 设备did
@property (nonatomic, copy) NSString * _Nullable did;
/// 值
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable data;
/// 类型 0: trait, 1:command
@property (nonatomic, strong) NSNumber * _Nullable type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore14LMMTRModelInfo")
@interface LMMTRModelInfo : LMMTRHttpBaseModel
/// 设备模型值
@property (nonatomic, copy) NSString * _Nullable model;
/// 设备模型ID
@property (nonatomic, copy) NSString * _Nullable modelId;
/// 父设备模型
@property (nonatomic, copy) NSString * _Nullable parentModel;
/// 设备类型
@property (nonatomic, strong) NSNumber * _Nullable modelType;
/// 在线状态
@property (nonatomic, copy) NSString * _Nullable offlineType;
/// 在线时间
@property (nonatomic, strong) NSNumber * _Nullable offlineTime;
@property (nonatomic, copy) NSString * _Nullable networkAccess;
/// 是否是Matter控制器设备
@property (nonatomic, strong) NSNumber * _Nullable matterController;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore17LMMTRModelInfoReq")
@interface LMMTRModelInfoReq : LMMTRHTTPBaseReq
/// vendorID
@property (nonatomic, copy) NSString * _Nonnull matterVid;
/// productID
@property (nonatomic, copy) NSString * _Nonnull matterPid;
/// 初始化
- (nonnull instancetype)initWithVendorID:(NSString * _Nonnull)vendorID productID:(NSString * _Nonnull)productID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12LMMatterCore18LMMTRModelInfoResp")
@interface LMMTRModelInfoResp : LMMTRHTTPBaseResp
@property (nonatomic, copy) NSArray<LMMTRModelInfo *> * _Nullable result;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 从DCL请求PAA证书
SWIFT_CLASS("_TtC12LMMatterCore22LMMTRPAACertificateReq")
@interface LMMTRPAACertificateReq : LMMTRHTTPBaseReq
/// 证书subjectKeyId
@property (nonatomic, copy) NSString * _Nonnull subject;
/// 证书issuerId
@property (nonatomic, copy) NSString * _Nonnull subjectKeyId;
/// 初始化
- (nonnull instancetype)initWithSubject:(NSString * _Nonnull)subject subjectKeyId:(NSString * _Nonnull)subjectKeyId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DCL返回PAA证书
SWIFT_CLASS("_TtC12LMMatterCore23LMMTRPAACertificateResp")
@interface LMMTRPAACertificateResp : LMMTRHTTPBaseResp
/// 错误码
@property (nonatomic, copy) NSString * _Nullable code;
/// 错误信息
@property (nonatomic, copy) NSString * _Nullable message;
/// 详细信息
@property (nonatomic, copy) NSArray * _Nullable details;
/// PAA证书信息
@property (nonatomic, strong) LMMTRApprovedCertificates * _Nullable approvedCertificates;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 配置首选的Thread网络请求
SWIFT_CLASS("_TtC12LMMatterCore30LMMTRPreferredThreadNetworkReq")
@interface LMMTRPreferredThreadNetworkReq : LMMTRHTTPBaseReq
/// 家庭ID
@property (nonatomic, copy) NSString * _Nonnull homeId;
/// Thread网络信息
@property (nonatomic, copy) NSString * _Nonnull operationalDataset;
/// 初始化
- (nonnull instancetype)initWithHomeId:(NSString * _Nonnull)homeId operationalDataset:(NSString * _Nonnull)operationalDataset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 配置首选的Thread网络返回
SWIFT_CLASS("_TtC12LMMatterCore31LMMTRPreferredThreadNetworkResp")
@interface LMMTRPreferredThreadNetworkResp : LMMTRHTTPBaseResp
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore14LMMTRPushModel")
@interface LMMTRPushModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 资源值查询请求模型
SWIFT_CLASS("_TtC12LMMatterCore17LMMTRResQueryData")
@interface LMMTRResQueryData : LMMTRHttpBaseModel
/// 对象id
@property (nonatomic, copy) NSString * _Nullable subjectId;
/// 查询的资源id列表
@property (nonatomic, copy) NSArray<NSString *> * _Nullable options;
/// 初始化
- (nonnull instancetype)initWithSubjectId:(NSString * _Nullable)subjectId options:(NSArray<NSString *> * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 资源值查询请求
SWIFT_CLASS("_TtC12LMMatterCore16LMMTRResQueryReq")
@interface LMMTRResQueryReq : LMMTRHTTPBaseReq
/// 最大列表60
@property (nonatomic, copy) NSArray<LMMTRResQueryData *> * _Nullable data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LMMTRResQueryResult;

/// 资源值查询返回
SWIFT_CLASS("_TtC12LMMatterCore17LMMTRResQueryResp")
@interface LMMTRResQueryResp : LMMTRHTTPBaseResp
/// 属性查询结果
@property (nonatomic, copy) NSArray<LMMTRResQueryResult *> * _Nullable result;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 资源值查询结果模型
SWIFT_CLASS("_TtC12LMMatterCore19LMMTRResQueryResult")
@interface LMMTRResQueryResult : LMMTRHttpBaseModel
/// 时间戳
@property (nonatomic, strong) NSNumber * _Nullable timeStamp;
/// 属性名
@property (nonatomic, copy) NSString * _Nullable attr;
/// 值
@property (nonatomic, copy) NSString * _Nullable value;
/// 对象id
@property (nonatomic, copy) NSString * _Nullable subjectID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore21LMMTRResSubscribeData")
@interface LMMTRResSubscribeData : LMMTRHttpBaseModel
/// 订阅的监听对象id
@property (nonatomic, copy) NSString * _Nullable subjectId;
/// 附加信息，推送时带上
@property (nonatomic, copy) NSString * _Nullable attach;
/// 通过attr（与三点式对应）订阅属性，与resourceIds二选一
@property (nonatomic, copy) NSArray<NSString *> * _Nullable attrs;
/// 通过资源ID（三点式）订阅属性，与attrs二选一
@property (nonatomic, copy) NSArray<NSString *> * _Nullable resourceIds;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 资源值订阅请求
SWIFT_CLASS("_TtC12LMMatterCore20LMMTRResSubscribeReq")
@interface LMMTRResSubscribeReq : LMMTRHTTPBaseReq
/// 订阅信息(最大列表60)
@property (nonatomic, copy) NSArray<LMMTRResSubscribeData *> * _Nullable data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore16LMMTRResWriteReq")
@interface LMMTRResWriteReq : LMMTRHTTPBaseReq
/// 设备did
@property (nonatomic, copy) NSString * _Nullable subjectId;
/// 值
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore23LMMTRShareDeviceManager") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRShareDeviceManager : NSObject
- (nonnull instancetype)initWithDeviceID:(NSString * _Nonnull)deviceID OBJC_DESIGNATED_INITIALIZER;
/// 打开配对窗口
- (void)openCommissioningWindowWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// 获取二维码和输入码
- (void)queryBindCodeInfoWithCompletion:(void (^ _Nullable)(NSString * _Nullable, NSString * _Nullable))completion;
/// 查询设备配对窗口状态
- (void)queryPairingStatusWithCompletion:(void (^ _Nullable)(NSError * _Nullable, BOOL))completion;
/// 查询已绑定的生态列表
- (void)queryBindListDataWithCompletion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
/// 移除指定的Fabric
- (void)removeFabricWith:(NSString * _Nonnull)fabricInfo completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// 移除Aqara生态
- (void)matterRemoveWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12LMMatterCore19LMMTRStructureModel") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRStructureModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore28LMMTRThreadNetworkDeviceInfo")
@interface LMMTRThreadNetworkDeviceInfo : LMMTRHttpBaseModel
/// 在线状态
@property (nonatomic) BOOL state;
@property (nonatomic, copy) NSString * _Nullable mac;
@property (nonatomic, copy) NSString * _Nullable parentDeviceId;
@property (nonatomic, strong) NSNumber * _Nullable isPreventMistakenDelete;
@property (nonatomic, copy) NSString * _Nullable firmwareVersion;
/// 设备名称
@property (nonatomic, copy) NSString * _Nullable deviceName;
@property (nonatomic, copy) NSString * _Nullable positionName;
@property (nonatomic, copy) NSString * _Nullable timeZone;
@property (nonatomic, strong) NSNumber * _Nullable subDeviceCount;
@property (nonatomic, strong) NSNumber * _Nullable modelType;
/// 设备位置
@property (nonatomic, copy) NSString * _Nullable positionId;
@property (nonatomic, strong) NSNumber * _Nullable createTime;
@property (nonatomic, copy) NSString * _Nullable model;
/// 设备did
@property (nonatomic, copy) NSString * _Nullable did;
@property (nonatomic, strong) NSNumber * _Nullable updateTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore22LMMTRThreadNetworkInfo")
@interface LMMTRThreadNetworkInfo : LMMTRHttpBaseModel
/// Thread网络名称
@property (nonatomic, copy) NSString * _Nullable networkName;
/// Thread参数信息
@property (nonatomic, copy) NSString * _Nullable operationalDataset;
/// Thread设备信息
@property (nonatomic, copy) NSArray<LMMTRThreadNetworkDeviceInfo *> * _Nullable deviceInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore25LMMTRThreadNetworkListReq")
@interface LMMTRThreadNetworkListReq : LMMTRHTTPBaseReq
/// 家庭ID
@property (nonatomic, copy) NSString * _Nonnull homeId;
/// 是否只需要首选网络
@property (nonatomic) BOOL first;
/// 初始化
- (nonnull instancetype)initWithHomeId:(NSString * _Nonnull)homeId first:(BOOL)first OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12LMMatterCore26LMMTRThreadNetworkListResp")
@interface LMMTRThreadNetworkListResp : LMMTRHTTPBaseResp
@property (nonatomic, copy) NSArray<LMMTRThreadNetworkInfo *> * _Nullable result;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore21LMMTRThreadNetworkReq")
@interface LMMTRThreadNetworkReq : LMMTRHTTPBaseReq
/// 家庭位置ID
@property (nonatomic, copy) NSString * _Nonnull positionId;
- (nonnull instancetype)initWithPositionId:(NSString * _Nonnull)positionId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12LMMatterCore22LMMTRThreadNetworkResp")
@interface LMMTRThreadNetworkResp : LMMTRHTTPBaseResp
@property (nonatomic, copy) NSArray<LMMTRThreadNetworkInfo *> * _Nullable result;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore14LMMTRTraitInfo")
@interface LMMTRTraitInfo : LMMTRHttpBaseModel
/// 设备did
@property (nonatomic, copy) NSString * _Nullable did;
/// 设备名称
@property (nonatomic, copy) NSString * _Nullable deviceName;
/// 设备位置
@property (nonatomic, copy) NSString * _Nullable positionId;
/// traitId
@property (nonatomic, copy) NSString * _Nullable traitId;
/// value
@property (nonatomic, copy) NSString * _Nullable value;
/// 在线状态
@property (nonatomic) BOOL state;
@property (nonatomic, strong) NSNumber * _Nullable timeStamp;
@property (nonatomic, copy) NSString * _Nullable mac;
@property (nonatomic, copy) NSString * _Nullable parentDeviceId;
@property (nonatomic, strong) NSNumber * _Nullable isPreventMistakenDelete;
@property (nonatomic, copy) NSString * _Nullable firmwareVersion;
@property (nonatomic, copy) NSString * _Nullable positionName;
@property (nonatomic, copy) NSString * _Nullable timeZone;
@property (nonatomic, strong) NSNumber * _Nullable subDeviceCount;
@property (nonatomic, strong) NSNumber * _Nullable modelType;
@property (nonatomic, copy) NSString * _Nullable model;
@property (nonatomic, strong) NSNumber * _Nullable createTime;
@property (nonatomic, strong) NSNumber * _Nullable updateTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore17LMMTRTraitInfoReq")
@interface LMMTRTraitInfoReq : LMMTRHTTPBaseReq
/// 家庭id
@property (nonatomic, copy) NSString * _Nonnull positionId;
/// TraitId
@property (nonatomic, copy) NSString * _Nonnull traitId;
/// 初始化
- (nonnull instancetype)initWithPositionId:(NSString * _Nonnull)positionId traitId:(NSString * _Nonnull)traitId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12LMMatterCore18LMMTRTraitInfoResp")
@interface LMMTRTraitInfoResp : LMMTRHTTPBaseResp
@property (nonatomic, copy) NSArray<LMMTRTraitInfo *> * _Nullable result;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore20LMMTRUnbindDeviceReq") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRUnbindDeviceReq : LMMTRHTTPBaseReq
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12LMMatterCore21LMMTRUnbindDeviceResp") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRUnbindDeviceResp : LMMTRHTTPBaseResp
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 厂商信息
SWIFT_CLASS("_TtC12LMMatterCore16LMMTRVendorInfos")
@interface LMMTRVendorInfos : LMMTRHttpBaseModel
@property (nonatomic, strong) NSNumber * _Nullable vendorID;
@property (nonatomic, copy) NSString * _Nullable vendorName;
@property (nonatomic, copy) NSString * _Nullable companyLegalName;
@property (nonatomic, copy) NSString * _Nullable companyPreferredName;
@property (nonatomic, copy) NSString * _Nullable vendorLandingPageURL;
@property (nonatomic, copy) NSString * _Nullable creator;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 从DCL请求厂商信息请求
SWIFT_CLASS("_TtC12LMMatterCore19LMMTRVendorInfosReq")
@interface LMMTRVendorInfosReq : LMMTRHTTPBaseReq
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 从DCL请求厂商信息返回
SWIFT_CLASS("_TtC12LMMatterCore20LMMTRVendorInfosResp")
@interface LMMTRVendorInfosResp : LMMTRHTTPBaseResp
/// 错误码
@property (nonatomic, copy) NSString * _Nullable code;
/// 错误信息
@property (nonatomic, copy) NSString * _Nullable message;
/// 厂商信息
@property (nonatomic, copy) NSArray<LMMTRVendorInfos *> * _Nullable vendorInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
